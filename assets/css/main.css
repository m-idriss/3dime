/* ==============================================
   3DIME - MODULAR CSS ARCHITECTURE
   
   Main stylesheet that imports all component modules.
   This modular approach improves maintainability,
   reduces specificity conflicts, and enhances developer experience.
   
   Architecture:
   - base/        : Reset, variables, typography
   - layout/      : Page structure, grid systems
   - components/  : Reusable UI components
   
   @module main
   @version 2.0
   @author Idriss Mohamady
   @since 2024
   ============================================== */

/* ========================
   BASE LAYER
   Foundation styles, resets, and design tokens
   ======================== */

/* CSS Custom Properties & Design Tokens */
@import url('./base/variables.css');

/* Modern CSS Reset & Base Styles */
@import url('./base/reset.css');

/* ========================
   LAYOUT LAYER
   Page structure and layout systems
   ======================== */

/* Main layout, grid, and positioning */
@import url('./layout/layout.css');

/* ========================
   COMPONENT LAYER
   Reusable UI components and patterns
   ======================== */

/* Accessibility components (skip links, focus management) */
@import url('./components/accessibility.css');

/* Card system (glass-morphism containers) */
@import url('./components/cards.css');

/* ========================
   UTILITY OVERRIDES
   Component-specific overrides and utilities
   ======================== */

/* Theme toggle component styling */
.theme-toggle {
  justify-content: space-between;
}

.theme-toggle .toggle-switch {
  width: 44px;
  height: 24px;
  background: var(--glass-bg);
  border-radius: var(--radius-full);
  border: 1px solid var(--glass-border);
  position: relative;
  transition: background var(--t-medium);
}

.theme-toggle .toggle-switch::after {
  content: '';
  position: absolute;
  top: 2px;
  left: 2px;
  width: 18px;
  height: 18px;
  background: var(--text-primary);
  border-radius: var(--radius-full);
  transition: transform var(--t-medium);
}

body.light-theme .theme-toggle .toggle-switch::after {
  transform: translateX(20px);
}

body.light-theme .theme-toggle .toggle-switch {
  background: var(--accent-color);
}

/* Notifications toggle styling */
.notifications-toggle {
  justify-content: space-between;
}

.notifications-toggle .toggle-switch {
  width: 44px;
  height: 24px;
  background: var(--glass-bg);
  border-radius: var(--radius-full);
  border: 1px solid var(--glass-border);
  position: relative;
  transition: background var(--t-medium);
}

.notifications-toggle .toggle-switch::after {
  content: '';
  position: absolute;
  top: 2px;
  left: 2px;
  width: 18px;
  height: 18px;
  background: var(--text-primary);
  border-radius: var(--radius-full);
  transition: transform var(--t-medium);
}

.notifications-toggle.active .toggle-switch {
  background: var(--accent-color);
}

.notifications-toggle.active .toggle-switch::after {
  transform: translateX(20px);
}

/* Social media links styling */
.social-links {
  display: flex;
  justify-content: center;
  gap: var(--space-sm);
  margin: var(--space-md) 0;
  flex-wrap: wrap;
}

.social-links a {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 48px;
  height: 48px;
  background: var(--glass-bg);
  border: 1px solid var(--glass-border);
  border-radius: var(--radius-md);
  color: var(--text-primary);
  text-decoration: none;
  transition: all var(--t-medium);
  backdrop-filter: blur(8px);
}

.social-links a:hover {
  background: var(--glass-bg-hover);
  transform: translateY(-2px);
  box-shadow: var(--shadow-card);
}

.social-links i {
  font-size: 20px;
}

/* GitHub heatmap container */
#heatmap-container {
  min-height: 200px;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Contact email styling */
.contact-email {
  display: block;
  text-align: center;
  background: var(--glass-bg);
  color: var(--text-primary);
  padding: var(--space-md);
  border-radius: var(--radius-md);
  border: 1px solid var(--glass-border);
  text-decoration: none;
  font-size: var(--font-size-lg);
  font-weight: var(--fw-semibold);
  transition: all var(--t-medium);
  backdrop-filter: blur(8px);
}

.contact-email:hover {
  background: var(--glass-bg-hover);
  transform: translateY(-2px);
  box-shadow: var(--shadow-card);
}

/* ========================
   DEVELOPER UTILITIES
   For debugging and development
   ======================== */

/* Component boundary visualization (development only) */
.debug-mode .container {
  outline: 1px dashed rgba(255, 0, 255, 0.5);
}

.debug-mode .group-column {
  outline: 1px dashed rgba(0, 255, 255, 0.5);
}

/* ========================
   PERFORMANCE OPTIMIZATIONS
   ======================== */

/* Hardware acceleration for smooth animations */
.container,
.logo,
.burger-button,
.item,
.tech-item {
  will-change: transform;
}

/* Contain layout shifts */
.cards-container {
  contain: layout style;
}

/* ========================
   COMPONENT DOCUMENTATION
   
   This modular CSS architecture provides:
   
   ✅ Separation of Concerns
      - Base styles isolated from components
      - Layout separate from visual styling
      - Easy to maintain and update
   
   ✅ Better Performance
      - Smaller files load faster
      - Browser can cache individual modules
      - Only load what you need
   
   ✅ Developer Experience
      - Easy to find specific styles
      - Clear naming conventions
      - Reduced specificity conflicts
   
   ✅ Scalability
      - Add new components without affecting existing ones
      - Easy to remove unused styles
      - Clear dependency chain
   
   Module Structure:
   
   base/variables.css  - Design tokens and CSS custom properties
   base/reset.css      - Modern CSS reset and base styles
   layout/layout.css   - Page structure and grid systems
   components/         - Reusable UI components
   
   To add new components:
   1. Create new file in components/
   2. Add @import to this file
   3. Follow established naming conventions
   4. Document component purpose and usage
   
   ======================== */