/* =========================
   Language Management
   ========================= */
function detectLanguage() {
  // Check URL parameter first
  const urlParams = new URLSearchParams(window.location.search);
  const urlLang = urlParams.get('lang');
  if (urlLang && ['en', 'fr'].includes(urlLang)) {
    return urlLang;
  }

  // Check localStorage
  const savedLang = localStorage.getItem('language');
  if (savedLang && ['en', 'fr'].includes(savedLang)) {
    return savedLang;
  }

  // Check browser language
  const browserLang = navigator.language.split('-')[0];
  if (browserLang === 'fr') {
    return 'fr';
  }

  // Default to English
  return 'en';
}

function setLanguage(lang) {
  if (!['en', 'fr'].includes(lang)) return;

  localStorage.setItem('language', lang);

  // Update HTML lang attribute
  document.documentElement.lang = lang;

  // Update URL without reload
  const url = new URL(window.location);
  url.searchParams.set('lang', lang);
  window.history.replaceState({}, '', url);

  // Reload content
  loadContent();
}

/* =========================
   Load content from JSON
   ========================= */
async function loadContent() {
  const currentLang = detectLanguage();
  let content;
  try {
    const res = await fetch(`i18n/${currentLang}.json`);
    if (!res.ok) {
      throw new Error(`Failed to load translation file: ${res.status} ${res.statusText}`);
    }
    content = await res.json();
  } catch (error) {
    // Display a user-friendly error message or fallback content
    const main = document.querySelector('.cards-container');
    main.innerHTML = '<div class="error-message">Failed to load content. Please try again later.</div>';
    console.error('Error loading translation file:', error);
    return;
  }

  const main = document.querySelector('.cards-container');
  main.innerHTML = ''; // Clear existing content before loading new content

  content.groups.forEach(group => {
    const groupDiv = document.createElement('div');
    groupDiv.classList.add('group-column');

    group.sections.forEach(section => {
      const container = document.createElement('section');
      container.classList.add('container');
      container.setAttribute('aria-label', section.name);

      let html = '';

      if (section.logo) {
        html += `<header class="profile-header">`;
        html += `<img src="${section.logo}" alt="Logo" class="logo">`;
        
        // Add burger menu for profile section
        if (section.name === 'profile') {
          html += `
            <div class="burger-menu">
              <button class="burger-button" id="burger-btn" aria-label="Profile options">
                <i class="fas fa-ellipsis-v"></i>
              </button>
              <div class="profile-dropdown" id="profile-dropdown">
                <button class="dropdown-item theme-toggle" id="theme-toggle">
                  <i class="fas fa-moon"></i>
                  <span>${content.ui.darkMode}</span>
                  <div class="toggle-switch"></div>
                </button>
                <button class="dropdown-item notifications-toggle" id="notifications-toggle">
                  <i class="fas fa-bell"></i>
                  <span>Notifications</span>
                  <div class="toggle-switch"></div>
                </button>
                <div class="dropdown-separator"></div>
                <button class="dropdown-item language-toggle" id="language-toggle">
                  <i class="fas fa-globe"></i>
                  <span>${content.ui.language}</span>
                  <i class="fas fa-chevron-right dropdown-arrow"></i>
                </button>
                <div class="language-submenu" id="language-submenu">
                  <button class="dropdown-item language-option" data-lang="en">
                    <span>${content.ui.english}</span>
                  </button>
                  <button class="dropdown-item language-option" data-lang="fr">
                    <span>${content.ui.french}</span>
                  </button>
                </div>
                <button class="dropdown-item font-size-toggle" id="font-size-toggle">
                  <i class="fas fa-text-height"></i>
                  <span>Font Size: Normal</span>
                </button>
              </div>
            </div>
          `;
        }
        
        html += `</header>`;
      }

      if (section.title) html += `<h2>${section.title}</h2>`;
      if (section.description) html += `<p>${section.description}</p>`;

      if (section.items) {
        if (section.itemsClass) html += `<div class="${section.itemsClass}">`;

        html += section.items.map(item => {
          const classes = [];
          if (item.linkType) classes.push(item.linkType);
          if (!item.iconClass && item.name) classes.push('link');
          if (item.extraClasses) classes.push(...item.extraClasses.split(' '));

          let linkHtml = `<a href="${item.url}" target="_blank"`;
          if (classes.length) {
            linkHtml += ` class="${classes.join(' ')}"`;
          }
          linkHtml += '>';
          if (item.iconClass) linkHtml += `<i class="fa ${item.iconClass}"></i>`;
          if (!item.iconClass && item.name) linkHtml += item.name;
          if (item.badge) {
            const badgeId = item.badgeId ? ` id="${item.badgeId}"` : '';
            linkHtml += `<span class="badge"${badgeId} style="display: none;">${item.badge}</span>`;
          }
          linkHtml += `</a>`;
          return item.wrapperClass ? `<div class="${item.wrapperClass}">${linkHtml}</div>` : linkHtml;
        }).join('');

        if (section.itemsClass) html += `</div>`;
      }

      // Handle heatmap section type
      if (section.type === 'heatmap') {
        html += `<div id="heatmap-container" class="heatmap-container"></div>`;
      }

      container.innerHTML = html;
      groupDiv.appendChild(container);
    });

    main.appendChild(groupDiv);
  });

  // All content loaded - fetch different GitHub metrics
  // Repository metrics (stars are more meaningful for badges than repo ID)
  updateBadge('github', 'badge-github', 'repos', { type: 'user' });
  updateBadge('trakt', 'badge-trakt', 'movies');
  updateBadge('x', 'badge-twitter', 'followers');
  
  // Load heatmap if container exists
  const heatmapContainer = document.getElementById('heatmap-container');
  if (heatmapContainer) {
    loadHeatmapWithRetry();
  }
  
  setupLogoReload();
  setupBurgerMenu();
}


/* =========================
   Logo Reload
   ========================= */
function setupLogoReload() {
  const logos = document.querySelectorAll('.logo');
  logos.forEach(logo => {
    logo.addEventListener('click', () => {
      document.body.classList.add('fade-out');
      setTimeout(() => location.reload(), 400);
    });
  });
}

/* =========================
   Burger Menu & Theme Toggle
   ========================= */
function setupBurgerMenu() {
  const burgerBtn = document.getElementById('burger-btn');
  const dropdown = document.getElementById('profile-dropdown');
  const themeToggle = document.getElementById('theme-toggle');
  const languageToggle = document.getElementById('language-toggle');
  const languageSubmenu = document.getElementById('language-submenu');
  const languageOptions = document.querySelectorAll('.language-option');
  const notificationsToggle = document.getElementById('notifications-toggle');
  const fontSizeToggle = document.getElementById('font-size-toggle');

  if (!burgerBtn || !dropdown || !themeToggle || !notificationsToggle || !fontSizeToggle) {
    console.warn(
      'setupBurgerMenu: Missing DOM elements:',
      !burgerBtn ? '#burger-btn' : '',
      !dropdown ? '#profile-dropdown' : '',
      !themeToggle ? '#theme-toggle' : '',
      !notificationsToggle ? '#notifications-toggle' : '',
      !fontSizeToggle ? '#font-size-toggle' : ''
    );
    return;
  }
  
  // Initialize theme from localStorage or default to dark
  const savedTheme = localStorage.getItem('theme');
  if (savedTheme === 'light') {
    document.body.classList.add('light-theme');
    updateThemeToggleUI(true);
  } else {
    updateThemeToggleUI(false);
  }
  
  // Initialize notifications from localStorage or default to on
  const savedNotifications = localStorage.getItem('notifications');
  if (savedNotifications === 'off') {
    document.body.classList.add('notifications-off');
    updateNotificationsToggleUI(false);
  } else {
    updateNotificationsToggleUI(true);
  }

  // Initialize font size from localStorage or default to normal
  const savedFontSize = localStorage.getItem('fontSize') || 'normal';
  applyFontSize(savedFontSize);
  updateFontSizeToggleUI(savedFontSize);


  // Burger button click handler
  burgerBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    toggleDropdown();
  });
  
  // Theme toggle click handler
  themeToggle.addEventListener('click', (e) => {
    e.stopPropagation();
    toggleTheme();
  });
  
  // Notifications toggle click handler
  notificationsToggle.addEventListener('click', (e) => {
    e.stopPropagation();
    toggleNotifications();
  });

  // Language toggle click handler
  if (languageToggle && languageSubmenu) {
    languageToggle.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleLanguageSubmenu();
    });

    // Language option click handlers
    languageOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        e.stopPropagation();
        const lang = option.getAttribute('data-lang');
        setLanguage(lang);
        closeDropdown();
      });
    });
  }


  // Font size toggle click handler
  fontSizeToggle.addEventListener('click', (e) => {
    e.stopPropagation();
    toggleFontSize();
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', (e) => {
    if (!dropdown.contains(e.target) && !burgerBtn.contains(e.target)) {
      closeDropdown();
    }
  });
  
  // Close dropdown on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeDropdown();
    }
  });
}

function toggleDropdown() {
  const burgerBtn = document.getElementById('burger-btn');
  const dropdown = document.getElementById('profile-dropdown');
  
  const isActive = dropdown.classList.contains('active');
  
  if (isActive) {
    closeDropdown();
  } else {
    dropdown.classList.add('active');
    burgerBtn.classList.add('active');
  }
}

function closeDropdown() {
  const burgerBtn = document.getElementById('burger-btn');
  const dropdown = document.getElementById('profile-dropdown');
  const languageSubmenu = document.getElementById('language-submenu');

  if (dropdown && burgerBtn) {
    dropdown.classList.remove('active');
    burgerBtn.classList.remove('active');
  }

  if (languageSubmenu) {
    languageSubmenu.classList.remove('active');
  }
}

function toggleLanguageSubmenu() {
  const languageSubmenu = document.getElementById('language-submenu');
  if (languageSubmenu) {
    languageSubmenu.classList.toggle('active');
  }
}

function toggleTheme() {
  const isLight = document.body.classList.contains('light-theme');
  
  if (isLight) {
    document.body.classList.remove('light-theme');
    localStorage.setItem('theme', 'dark');
    updateThemeToggleUI(false);
  } else {
    document.body.classList.add('light-theme');
    localStorage.setItem('theme', 'light');
    updateThemeToggleUI(true);
  }
}

function updateThemeToggleUI(isLight) {
  const themeToggle = document.getElementById('theme-toggle');
  if (!themeToggle) return;
  
  const icon = themeToggle.querySelector('i');
  const text = themeToggle.querySelector('span');
  
  if (isLight) {
    icon.className = 'fas fa-sun';
    text.textContent = getCurrentLanguageUI().lightMode;
  } else {
    icon.className = 'fas fa-moon';
    text.textContent = getCurrentLanguageUI().darkMode;
  }
}

function getCurrentLanguageUI() {
  // Return UI strings for current language (fallback to English)
  const currentLang = detectLanguage();
  if (currentLang === 'fr') {
    return {
      darkMode: "Mode Sombre",
      lightMode: "Mode Clair"
    };
  }
  return {
    darkMode: "Dark Mode",
    lightMode: "Light Mode"
  };
}

function toggleNotifications() {
  const isOn = localStorage.getItem('notifications') !== 'off';

  if (isOn) {
    localStorage.setItem('notifications', 'off');
    document.body.classList.add('notifications-off');
    updateNotificationsToggleUI(false);
  } else {
    localStorage.setItem('notifications', 'on');
    document.body.classList.remove('notifications-off');
    updateNotificationsToggleUI(true);
  }
}

function updateNotificationsToggleUI(isOn) {
  const notificationsToggle = document.getElementById('notifications-toggle');
  if (!notificationsToggle) return;

  const icon = notificationsToggle.querySelector('i');
  const text = notificationsToggle.querySelector('span');

  if (isOn) {
    icon.className = 'fas fa-bell';
    text.textContent = 'Notifications';
  } else {
    icon.className = 'fas fa-bell-slash';
    text.textContent = 'Notifications';
  }
}

function toggleFontSize() {
  const currentSize = localStorage.getItem('fontSize') || 'normal';
  let nextSize;

  // Cycle through: normal -> large -> small -> normal
  const fontSizes = ['normal', 'large', 'small'];
  const currentIndex = fontSizes.indexOf(currentSize);
  const nextIndex = (currentIndex + 1) % fontSizes.length;
  nextSize = fontSizes[nextIndex];

  localStorage.setItem('fontSize', nextSize);
  applyFontSize(nextSize);
  updateFontSizeToggleUI(nextSize);
}

function applyFontSize(size) {
  // Remove existing font size classes
  document.body.classList.remove('font-small', 'font-large');

  // Apply new font size class
  if (size === 'small') {
    document.body.classList.add('font-small');
  } else if (size === 'large') {
    document.body.classList.add('font-large');
  }
  // Normal size doesn't need a class (uses default CSS variables)
}

function updateFontSizeToggleUI(size) {
  const fontSizeToggle = document.getElementById('font-size-toggle');
  if (!fontSizeToggle) return;

  const text = fontSizeToggle.querySelector('span');
  const sizeNames = {
    'small': 'Small',
    'normal': 'Normal',
    'large': 'Large'
  };

  text.textContent = `Font Size: ${sizeNames[size] || 'Normal'}`;
}

/* =========================
   Heatmap Loading with Retry
   ========================= */
async function loadHeatmapWithRetry(retries = 3, delay = 1000) {
  // Check if CalHeatmap is available
  if (typeof CalHeatmap === 'undefined') {
    console.warn('CalHeatmap not yet available, waiting...');
    await new Promise(resolve => setTimeout(resolve, delay));
    if (typeof CalHeatmap === 'undefined') {
      console.error('CalHeatmap library failed to load');
      const container = document.getElementById('heatmap-container');
      if (container) {
        container.innerHTML = '<p class="error-message">Unable to load commit activity</p>';
      }
      return;
    }
  }

  for (let i = 0; i < retries; i++) {
    try {
      await loadHeatmap();
      return; // Success, stop retrying
    } catch (err) {
      console.warn(`Heatmap load failed (attempt ${i + 1}/${retries})`, err);
      if (i < retries - 1) {
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  
  // All retries failed, show fallback message
  const container = document.getElementById('heatmap-container');
  if (container) {
    container.innerHTML = '<p class="error-message">Unable to load commit activity</p>';
  }
}

/* =========================
   Heatmap Loading
   ========================= */
async function loadHeatmap() {
  try {
    const response = await fetch('proxy.php?service=github&type=commits');
    if (!response.ok) {
      throw new Error(`Failed to fetch commit data: ${response.status}`);
    }
    
    const data = await response.json();
    const commitActivity = data.commit_activity;
    
    if (!commitActivity || !Array.isArray(commitActivity)) {
      console.warn('No commit activity data available');
      return;
    }

  const commitSource = commitActivity.flatMap(week =>
    week.days.map((value, i) => {
      const date = new Date((week.week + i * 86400) * 1000)
        .toISOString()
        .split("T")[0];
      return { date, value };
    })
  );

  const cal = new CalHeatmap();
  cal.paint({
    itemSelector: '#heatmap-container',
    domain: {
      type: 'month',
      label: { text: 'MMM', textAlign: 'start', position: 'top'}
    },
  subDomain: { type: 'ghDay', radius: 2, width: 9, height: 9, gutter: 1, },
    data: {
      source: commitSource,
      x: d => new Date(d.date).getTime(),
      y: d => d.value
    },
    date: {
      start: new Date(new Date().setMonth(new Date().getMonth() - 3)),
      locale: { weekStart: 1 },
      highlight: [new Date()]
    },
    range: 6,
    scale: {
      color: {
        range: ['rgba(255, 255, 255, 0.2)', 'green'],
        interpolate: 'hsl',
        type: 'linear',
        domain: [0, 30],
      },
    },
    theme: 'dark'
  },
     [
       [
         CalendarLabel,
         {
           position: 'left',
           key: 'left',
           text: () => ['Mon', '', '', 'Thu', '', '', 'Sun'],
           textAlign: 'end',
           width: 20,
           padding: [25, 5, 0, 0],
         },
       ],
    [
      Tooltip,
      {
        text: function (date, value, dayjsDate) {
          return (
            (value ? value + ' commits' : 'No commits') +
            ' on ' +
            dayjsDate.format('LL')
          );
        },
      },
    ]
     ]);

  } catch (error) {
    console.error('Error loading heatmap:', error);
    const container = document.getElementById('heatmap-container');
    if (container) {
      container.innerHTML = '<p class="error-message">Unable to load commit activity</p>';
    }
  }
}

/* =========================
   Update Badge
   ========================= */
function updateBadge(service, badgeId, field, params = {}) {
    let url = `proxy.php?service=${service}`;

    // Add additional parameters to URL
    Object.keys(params).forEach(key => {
        url += `&${key}=${encodeURIComponent(params[key])}`;
    });

    fetch(url)
        .then(res => {
            if (!res.ok) {
                throw new Error(`Network response was not ok (${res.status})`);
            }
            return res.json();
        })
        .then(data => {
            console.log(`Data ${service}:`, data);
            const badge = document.getElementById(badgeId);
            const count = data[field] || 0;
            if (badge) {
                badge.textContent = count;
                badge.style.display = count > 0 ? "flex" : "none";
            }
        })
        .catch(err => console.error(`Erreur ${service}:`, err));
}

/* =========================
   Service Worker
   ========================= */
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('assets/sw.js')
    .then(() => console.log('SW registered'))
    .catch(err => console.log('SW failed', err));
}

/* =========================
   Page Fade-In
   ========================= */
document.addEventListener('DOMContentLoaded', () => {
  // Set initial language on HTML element
  const currentLang = detectLanguage();
  document.documentElement.lang = currentLang;

  document.body.classList.add('loaded'); // fade-in
  loadContent(); // load content & trigger animations after DOM insertion
});
